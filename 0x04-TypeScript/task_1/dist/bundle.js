/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!********************!*\
  !*** ./js/main.ts ***!
  \********************/
/* eslint-disable @typescript-eslint/class-name-casing */
var Teacher = /** @class */ (function () {
    function Teacher(firstName, lastName, fullTimeEmployee, location) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.fullTimeEmployee = fullTimeEmployee;
        this.location = location;
    }
    Teacher.prototype.toString = function () {
        return "Object\n".concat(JSON.stringify(this, null, 2));
    };
    return Teacher;
}());
var director1 = {
    firstName: "John",
    lastName: "Doe",
    fullTimeEmployee: true,
    location: "London",
    numberOfReports: 17,
};
console.log(director1);
var teacher3 = new Teacher("John", "Doe", false, "London");
console.log(teacher3.toString());
// Define the function
function printTeacher(firstName, lastName) {
    var firstLetter = firstName.charAt(0).toUpperCase();
    var formattedLastName = lastName.charAt(0).toUpperCase() + lastName.slice(1);
    return "".concat(firstLetter, ". ").concat(formattedLastName);
}
// Test the function
console.log(printTeacher("John", "Doe"));
var StudentClass = /** @class */ (function () {
    function StudentClass(_a) {
        var firstName = _a.firstName, lastName = _a.lastName;
        this.firstName = firstName;
        this.lastName = lastName;
    }
    StudentClass.prototype.workOnHomework = function () {
        return "Currently working";
    };
    StudentClass.prototype.displayName = function () {
        return this.firstName;
    };
    return StudentClass;
}());
var student1 = new StudentClass({ firstName: "Alice", lastName: "Johnson" });
console.log(student1.workOnHomework()); // Output: Currently working
console.log(student1.displayName()); // Output: Alice

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEseURBQXlEO0FBQ3pEO0lBTUksaUJBQ0ksU0FBaUIsRUFDakIsUUFBZ0IsRUFDaEIsZ0JBQXlCLEVBQ3pCLFFBQWdCO1FBRWhCLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQztRQUN6QyxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztJQUM3QixDQUFDO0lBRUQsMEJBQVEsR0FBUjtRQUNJLE9BQU8sa0JBQVcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFFLENBQUM7SUFDdEQsQ0FBQztJQUNMLGNBQUM7QUFBRCxDQUFDO0FBTUQsSUFBTSxTQUFTLEdBQWM7SUFDekIsU0FBUyxFQUFFLE1BQU07SUFDakIsUUFBUSxFQUFFLEtBQUs7SUFDZixnQkFBZ0IsRUFBRSxJQUFJO0lBQ3RCLFFBQVEsRUFBRSxRQUFRO0lBQ2xCLGVBQWUsRUFBRSxFQUFFO0NBQ3RCLENBQUM7QUFFRixPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBRXZCLElBQU0sUUFBUSxHQUFHLElBQUksT0FBTyxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBRTdELE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7QUFFakMsc0JBQXNCO0FBQ3RCLFNBQVMsWUFBWSxDQUFDLFNBQWlCLEVBQUUsUUFBZ0I7SUFDckQsSUFBTSxXQUFXLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUN0RCxJQUFNLGlCQUFpQixHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvRSxPQUFPLFVBQUcsV0FBVyxlQUFLLGlCQUFpQixDQUFFLENBQUM7QUFDbEQsQ0FBQztBQU9ELG9CQUFvQjtBQUNwQixPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztBQVl6QztJQUlJLHNCQUFZLEVBQTJDO1lBQXpDLFNBQVMsaUJBQUUsUUFBUTtRQUM3QixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztJQUM3QixDQUFDO0lBRUQscUNBQWMsR0FBZDtRQUNJLE9BQU8sbUJBQW1CLENBQUM7SUFDL0IsQ0FBQztJQUVELGtDQUFXLEdBQVg7UUFDSSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDMUIsQ0FBQztJQUNMLG1CQUFDO0FBQUQsQ0FBQztBQUVELElBQU0sUUFBUSxHQUFHLElBQUksWUFBWSxDQUFDLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztBQUUvRSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLENBQUMsNEJBQTRCO0FBQ3BFLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBSSxnQkFBZ0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90eXBlc2NyaXB0X2RlcGVuZGVuY2llcy8uL2pzL21haW4udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L2NsYXNzLW5hbWUtY2FzaW5nICovXG5jbGFzcyBUZWFjaGVyIHtcbiAgICBmaXJzdE5hbWU6IHN0cmluZztcbiAgICBsYXN0TmFtZTogc3RyaW5nO1xuICAgIGZ1bGxUaW1lRW1wbG95ZWU6IGJvb2xlYW47XG4gICAgbG9jYXRpb246IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBmaXJzdE5hbWU6IHN0cmluZyxcbiAgICAgICAgbGFzdE5hbWU6IHN0cmluZyxcbiAgICAgICAgZnVsbFRpbWVFbXBsb3llZTogYm9vbGVhbixcbiAgICAgICAgbG9jYXRpb246IHN0cmluZ1xuICAgICkge1xuICAgICAgICB0aGlzLmZpcnN0TmFtZSA9IGZpcnN0TmFtZTtcbiAgICAgICAgdGhpcy5sYXN0TmFtZSA9IGxhc3ROYW1lO1xuICAgICAgICB0aGlzLmZ1bGxUaW1lRW1wbG95ZWUgPSBmdWxsVGltZUVtcGxveWVlO1xuICAgICAgICB0aGlzLmxvY2F0aW9uID0gbG9jYXRpb247XG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGBPYmplY3RcXG4ke0pTT04uc3RyaW5naWZ5KHRoaXMsIG51bGwsIDIpfWA7XG4gICAgfVxufVxuXG5pbnRlcmZhY2UgRGlyZWN0b3JzIGV4dGVuZHMgVGVhY2hlciB7XG4gICAgbnVtYmVyT2ZSZXBvcnRzOiBudW1iZXI7XG59XG5cbmNvbnN0IGRpcmVjdG9yMTogRGlyZWN0b3JzID0ge1xuICAgIGZpcnN0TmFtZTogXCJKb2huXCIsXG4gICAgbGFzdE5hbWU6IFwiRG9lXCIsXG4gICAgZnVsbFRpbWVFbXBsb3llZTogdHJ1ZSxcbiAgICBsb2NhdGlvbjogXCJMb25kb25cIixcbiAgICBudW1iZXJPZlJlcG9ydHM6IDE3LFxufTtcblxuY29uc29sZS5sb2coZGlyZWN0b3IxKTtcblxuY29uc3QgdGVhY2hlcjMgPSBuZXcgVGVhY2hlcihcIkpvaG5cIiwgXCJEb2VcIiwgZmFsc2UsIFwiTG9uZG9uXCIpO1xuXG5jb25zb2xlLmxvZyh0ZWFjaGVyMy50b1N0cmluZygpKTtcblxuLy8gRGVmaW5lIHRoZSBmdW5jdGlvblxuZnVuY3Rpb24gcHJpbnRUZWFjaGVyKGZpcnN0TmFtZTogc3RyaW5nLCBsYXN0TmFtZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCBmaXJzdExldHRlciA9IGZpcnN0TmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKTtcbiAgICBjb25zdCBmb3JtYXR0ZWRMYXN0TmFtZSA9IGxhc3ROYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbGFzdE5hbWUuc2xpY2UoMSk7XG4gICAgcmV0dXJuIGAke2ZpcnN0TGV0dGVyfS4gJHtmb3JtYXR0ZWRMYXN0TmFtZX1gO1xufVxuXG4vLyBEZWZpbmUgdGhlIGludGVyZmFjZVxuaW50ZXJmYWNlIHByaW50VGVhY2hlckZ1bmN0aW9uIHtcbiAgICAoZmlyc3ROYW1lOiBzdHJpbmcsIGxhc3ROYW1lOiBzdHJpbmcpOiBzdHJpbmc7XG59XG5cbi8vIFRlc3QgdGhlIGZ1bmN0aW9uXG5jb25zb2xlLmxvZyhwcmludFRlYWNoZXIoXCJKb2huXCIsIFwiRG9lXCIpKTtcblxuaW50ZXJmYWNlIFN0dWRlbnRDb25zdHJ1Y3RvciB7XG4gICAgZmlyc3ROYW1lOiBzdHJpbmc7XG4gICAgbGFzdE5hbWU6IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIFN0dWRlbnRJbnRlcmZhY2Uge1xuICAgIHdvcmtPbkhvbWV3b3JrKCk6IHN0cmluZztcbiAgICBkaXNwbGF5TmFtZSgpOiBzdHJpbmc7XG59XG5cbmNsYXNzIFN0dWRlbnRDbGFzcyBpbXBsZW1lbnRzIFN0dWRlbnRJbnRlcmZhY2Uge1xuICAgIGZpcnN0TmFtZTogc3RyaW5nO1xuICAgIGxhc3ROYW1lOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3Rvcih7IGZpcnN0TmFtZSwgbGFzdE5hbWUgfTogU3R1ZGVudENvbnN0cnVjdG9yKSB7XG4gICAgICAgIHRoaXMuZmlyc3ROYW1lID0gZmlyc3ROYW1lO1xuICAgICAgICB0aGlzLmxhc3ROYW1lID0gbGFzdE5hbWU7XG4gICAgfVxuXG4gICAgd29ya09uSG9tZXdvcmsoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIFwiQ3VycmVudGx5IHdvcmtpbmdcIjtcbiAgICB9XG5cbiAgICBkaXNwbGF5TmFtZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5maXJzdE5hbWU7XG4gICAgfVxufVxuXG5jb25zdCBzdHVkZW50MSA9IG5ldyBTdHVkZW50Q2xhc3MoeyBmaXJzdE5hbWU6IFwiQWxpY2VcIiwgbGFzdE5hbWU6IFwiSm9obnNvblwiIH0pO1xuXG5jb25zb2xlLmxvZyhzdHVkZW50MS53b3JrT25Ib21ld29yaygpKTsgLy8gT3V0cHV0OiBDdXJyZW50bHkgd29ya2luZ1xuY29uc29sZS5sb2coc3R1ZGVudDEuZGlzcGxheU5hbWUoKSk7ICAgIC8vIE91dHB1dDogQWxpY2VcblxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9